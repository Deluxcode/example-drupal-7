<?php

/**
* @file
* Mail Redirect
* 
*    redirect any system generated email to your configured email domain
*    usage:
*       - in your test site's settings.php set:
*       $conf = array('mail_redirect_domain' => "mydomain.com");
*
*   result:
*       - input $to:    john_smith@about.com
*       - output $to:   john_smith@mydomain.com
*
*   See README.txt for additional details on test setup
* 
*  NOTE - This module will handle redirecting all email messages created and sent with drupal_mail(). Email messages sent using functions other than drupal_mail() will not 
* be affect. For example, a contributed module directly calling the drupal_mail_system()->mail() or PHP mail() function will not be affect.
* All core modules use drupal_mail() for messaging, it is best practice but not mandatory in contributed modules.
*/

/**
* Implements hook_help().
*/
function mail_redirect_help($path = '', $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Redirects ALL system generated email to a test mail domain. Works with any mail generated
      by drupal_mail() or (with included patch applied) any module that uses mimemail. Used for testing 
      mail functions on test sites with real email addresses in the db. Be sure to add: 
      $conf = array(\'mail_redirect_domain\' => "mydomain.com"); in your settings.php');
  }
}

/**
* Implements hook_menu()
*/
function mail_redirect_menu() {
  $items = array();

  $items['admin/config/development/mail_redirect'] = array(
    'title' => 'Mail Redirect',
    'description' => 'Settings for Mail Redirect module.',
    'access arguments' => array('administer site configuration'), 
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mail_redirect_admin_settings'), 
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

// System Admin Form - callback for menu item listed above
/**
* Page callback for admin settings form
* 
* @param mixed $form
* @param mixed $form_state
*/
function mail_redirect_admin_settings($form, &$form_state) {
  // system settings     
  $form['mail_redirect_opt'] = array(
    '#type' => 'radios',
    '#title' => t('Mail Redirect Method'),
    '#options' => array(
      'none' => t('Deliver mail normally'),
      'domain' => t('Redirect each recipient to a catch-all domain'),
      'address' => t('Redirect each message to a single address'),
    ),
    '#default_value' => variable_get('mail_redirect_opt', 'none'),
  );

  $form['mail_redirect_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect Mail Domain'),
    '#default_value' => variable_get('mail_redirect_domain'),
    '#description' => t("Set the redirect mail domain to that of your catch-all mail test server. See README.txt for more info."),
    '#states' => array(
      // Show the setting based on the mail redirect method setting.
      'visible' => array(
        ':input[name="mail_redirect_opt"]' => array('value' => 'domain'),
      ),
    ),
  );

  $form['mail_redirect_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect Mail Address'),
    '#description' => t('Redirect all mail to this address for testing.'),
    '#default_value' => variable_get('mail_redirect_address'),
    '#states' => array(
      // Show the setting based on the mail redirect method setting.
      'visible' => array(
        ':input[name="mail_redirect_opt"]' => array('value' => 'address'),
      ),
    ),
  );

  // list of emails to not redirect to 
  // @todo replace with add more list of user's and possibly a role selector
  $form['mail_redirect_skip_redirect'] = array(
    '#type' => 'textarea',
    '#title' => t('Skip Redirect'),
    '#default_value' => variable_get('mail_redirect_skip_redirect'),
    '#description' => t("Enter a CSV list of email addresses to ignore when doing mail redirect. In other words these email addresses will not be redirected and will
      receive email as usual."),
  );       
  
  $form['mail_redirect_nomail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Silent Redirect'),
    '#default_value' => variable_get('mail_redirect_nomail'),
    '#description' => t("Check this if you do not want the redirected mail to actually be emailed; simply discarded. NOTE: this has no impact on the emails 
      listed in the Skip Redirect section above."),
  );

  return system_settings_form($form);
}

/**
* Form validation handler for mail_redirect_admin_settings().
*/
function mail_redirect_admin_settings_validate(&$form, &$form_state) {
  $vals = $form_state['values'];

  // Validate the domain name.
  if (!empty($vals['mail_redirect_domain']) && !drupal_valid_http_host($vals['mail_redirect_domain'])) {
    form_set_error('mail_redirect_domain', t('%name is not a valid domain.', array('%name' => $vals['mail_redirect_domain'])));
  }

  // Validate the email address.
  if (!empty($vals['mail_redirect_address']) && !valid_email_address($vals['mail_redirect_address'])) {
    form_set_error('mail_redirect_address', t('%address is not a valid e-mail address.', array('%address' => $vals['mail_redirect_address'])));
  }

  // Ensure a value is set for the option chosen.
  if ($vals['mail_redirect_opt'] == 'domain' && empty($vals['mail_redirect_domain'])) {
    form_set_error('mail_redirect_domain', t('A domain name is required in order to redirect each recipient to a catch-all domain.'));
  }
  elseif ($vals['mail_redirect_opt'] == 'address' && empty($vals['mail_redirect_address'])) {
    form_set_error('mail_redirect_address', t('A valid e-mail address is required in order to redirect each message to a catch-all address.'));
  }
}

/**
* Implement mail_alter hook to replace domain of all email addresses
* redirect any system generated email to your configured email domain
*
*   shows a msg to indicate whenever an email has been redirected.
* 
* We need to handle RFC2822 formats for $message['to']:
*    user@example.com
*    user@example.com, anotheruser@example.com
*    User <user@example.com>
*    User <user@example.com>, Another User <anotheruser@example.com>
* 
* @param string $message
*
* @todo Handle CC and BCC headers.
*/
function mail_redirect_mail_alter(&$message) {
  // if we don't have a To address; no point in doing anything
  if (!$message['to']) {
    return;
  }
  $redirect  = variable_get('mail_redirect_opt', 'none');
  
  switch ($redirect) {
    // do not redirect anything
    case 'none':
      return;
    
    // Redirect all recipients to a catch-all domain.
    case 'domain':
      if (!$myredirect = variable_get('mail_redirect_domain', '')) {
        return;
      }
      $type = "DOMAIN";
      $replace1 = '$1<$3@' . $myredirect . '>';
      $replace2 = '$2@' . $myredirect;
      break;
    
    // Redirect each message to a single catch-all address.
    case 'address':  
      if (!$myredirect = variable_get('mail_redirect_address', '')) {
        return;
      }
      $type = "ADDRESS";
      $replace1 = '$1<' . $myredirect . '>';
      $replace2 = $myredirect;
      break; 
  } 
  
  $skips = explode(',', variable_get('mail_redirect_skip_redirect'));
  array_walk($skips, '_mail_redirect_trim_array_values');
  
  $original_tos = mail_redirect_recipients($message);
  
  foreach ($original_tos as $to) {
    // if it's a SKIP addresses we leave it alone
    $address = preg_replace('^(.*)<((.+)@(.+))>^', "$3@$4", $to);
    if (in_array($address, $skips)) {
      $skipped[] = $to;
      $tos[] = $to;
    }
    // if it isn't a SKIP address then we either modify the address or, if no_mail is set, we simply drop the address from our list
    else {
      $not_skipped[] = $to;
      if (variable_get('mail_redirect_nomail')) {
        continue;
      }
      else {
        // Swap in our redirect domain or address for the remaining addresses.
        if (stristr($to, "<")) {
          $tos[] = preg_replace('^(.*)<((.+)@.+)>^', $replace1, $to);
        }
        else {
          $tos[] = preg_replace('^((.+)@.+)^', $replace2, $to);
        }
      }
    }
  }
  
  // if we have no items left in our list that were not skipped; let's just quit
  if (!count($not_skipped)) {
    return;  
  }

  // Replace To with our modified address/list. 
  // This could include some addresses that have been skipped and some that have been redirected
  if (count($tos)) {
    $message['to'] = implode(",", $tos);
  }
  
  $not_skipped_list = implode(",", $not_skipped);

  // set message to notify user what we did
  drupal_set_message(t("The following TO address or list: %to has been redirected to the following TEST %type: %myredirect",
    array('%to' => $not_skipped_list, '%type' => $type, '%myredirect' => $myredirect)));
  
  if (variable_get('mail_redirect_nomail')) {
    $message['send'] = FALSE;
    drupal_set_message(t("However, since Mail Redirect is set to <em>silent redirect</em>; these emails will not be sent."));
  }
  
  // modify Subject to make it obvious who the original emails were intended for
  // NOTE: this may fail if we have a long list as Subject field is likely limited length - maybe original idea of embedding into Body makes more sense??
  $message['subject']  = $message['subject'] . t(" [@to] ",array('@to' => $not_skipped_list));
}
    
/**
* Format an array of message recipients.
*/
function mail_redirect_recipients($message) {
  // If we have a list.
  if (stristr($message['to'], ",")) {
    $tos = split(",", $message['to']);
    array_walk($tos, '_mail_redirect_trim_array_values');
  }
  else {
    $tos = (array) $message['to'];
  }

  return $tos;
}

/**
* Implements hook_requirements(). 
*    - To add to note if mail redirect is defined
*/
function mail_redirect_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    if (variable_get('mail_redirect_opt', 'none') != 'none') {
      if (variable_get('mail_redirect_opt') == 'domain') {
        $msg = "Site mail is being redirected to <strong>" . variable_get('mail_redirect_domain') . "</strong>";
      }
      else {
        $msg = "Site mail is being redirected to <strong>" . variable_get('mail_redirect_address') . "</strong>";
      }
    }
    else {
      $msg = "Mail redirect is installed but your mail is not set to be redirected.";
      $severity = REQUIREMENT_WARNING;
    }
    $requirements['mail_redirect_status'] = array(
      'title' => 'Mail Redirect',
      'value' => $msg,
      'severity' => REQUIREMENT_WARNING,
    );
  }
  return $requirements;
}

function _mail_redirect_trim_array_values(&$value) {
  $value = trim($value);
}
